"""
Django settings for pdf_score project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .envファイルから環境変数を読み込む
# .envファイルはプロジェクトのルートディレクトリ(manage.pyと同じ階層)に配置します。
load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 環境変数からSECRET_KEYを読み込む。なければ開発用のデフォルト値を使用。
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "django-insecure--f@d2iz6cwbut3hc3-fs9lh_+i2=804m%c^3=t$(-!!fw%7323")

# SECURITY WARNING: don't run with debug turned on in production!
# 環境変数からDEBUG値を読み込む。True/Falseの文字列をブール値に変換。
# デフォルトは開発用にTrue。
DEBUG = os.getenv("DJANGO_DEBUG", "True") == "True"

ALLOWED_HOSTS_COMMON = [
    "162.43.36.98",
    "djartipy.com",
    "www.djartipy.com",
    "drumtabs.djartipy.com"
]

if DEBUG:
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"] + ALLOWED_HOSTS_COMMON
else:
    # 本番環境では環境変数から追加のホストを読み込むか、
    # またはこのリストを本番用に調整します。
    # 例: ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") + ALLOWED_HOSTS_COMMON
    # 環境変数が設定されていない場合は、ALLOWED_HOSTS_COMMON のみになります。
    # DJANGO_ALLOWED_HOSTS="your.production.domain.com,another.domain.com" のように設定
    production_hosts_str = os.getenv("DJANGO_ALLOWED_HOSTS")
    if production_hosts_str:
        # カンマ区切りの文字列をリストに変換し、各要素の空白を除去
        additional_hosts = [host.strip() for host in production_hosts_str.split(',') if host.strip()]
        ALLOWED_HOSTS = additional_hosts + ALLOWED_HOSTS_COMMON
    else:
        ALLOWED_HOSTS = ALLOWED_HOSTS_COMMON

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "pv3",
    "accounts",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pdf_score.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pdf_score.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = "static/"

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # 静的ファイルの収集先ディレクトリ
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Login settings
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/pv3/'
LOGOUT_REDIRECT_URL = '/pv3/'

# CSRF設定
# 主な本番環境オリジン (スキーム + ホスト名)。
# アプリが標準ポート以外でアクセスされ、そのポートがHostヘッダーに含まれる場合は、
# ここに含めるか、(推奨) .env ファイルで DJANGO_CSRF_TRUSTED_ORIGINS を設定してください。
CSRF_TRUSTED_ORIGINS_PRIMARY = [
    "https://drumtabs.djartipy.com",
    # "https://djartipy.com", # このアプリでこのドメインも使用する場合はコメント解除
    # "https://www.djartipy.com", # このアプリでこのドメインも使用する場合はコメント解除
]

# 開発時にのみ追加で許可する可能性のあるオリジン (必要に応じて)
CSRF_TRUSTED_ORIGINS_DEV_ONLY = [
    "http://localhost:8081", # 以前のNginx設定用など
    "http://127.0.0.1:8081",
    "http://162.43.36.98:8081", # サーバーIPへのHTTPアクセス用 (開発時)
    "http://djartipy.com:8082", # ドメインへのHTTPアクセス用 (開発時)
    "http://www.djartipy.com:8082",
]

# セキュリティ設定
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

if DEBUG:
    # 開発環境用の設定
    # 主なオリジン (本番に近いURLをローカルでテストする場合の参照用) + 開発専用オリジン + ローカルサーバーアクセス
    CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS_PRIMARY + CSRF_TRUSTED_ORIGINS_DEV_ONLY + [
        "http://localhost",      # docker-compose.dev.yml の Nginx 用 (ポート 80)
        "http://127.0.0.1",      # docker-compose.dev.yml の Nginx 用 (ポート 80)
        "http://localhost:8000", # Django の runserver 用
        "http://127.0.0.1:8000", # Django の runserver 用
    ]
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
else:
    # 本番環境用の設定
    # .env ファイルからの DJANGO_CSRF_TRUSTED_ORIGINS を優先 (設定されていれば)
    prod_csrf_origins_env = os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS")
    if prod_csrf_origins_env:
        CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in prod_csrf_origins_env.split(',') if origin.strip()]
    else:
        # 環境変数が設定されていない場合は、主要リストにフォールバック (環境変数の設定を推奨)
        CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS_PRIMARY

    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
